{
  "hash": "041a845453633a6f18f8c99889ab8036",
  "result": {
    "markdown": "---\ntitle: \"Appendix 3.B: Preparing OECD data\"\nformat: html\nexecute:\n  freeze: true  # never re-render during project render\n---\n\n\n# To-do:\n\n- I moved the data folder, but haven't yet relected this in the code below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyverse' was built under R version 4.1.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──✔ ggplot2 3.3.5      ✔ purrr   0.3.4 \n✔ tibble  3.1.6      ✔ dplyr   1.0.10\n✔ tidyr   1.2.0      ✔ stringr 1.4.0 \n✔ readr   2.1.2      ✔ forcats 0.5.1 \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyr' was built under R version 4.1.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readr' was built under R version 4.1.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.1.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(rsdmx)\nlibrary(knitr)\n```\n:::\n\n\n## Queries of the OECD API\n\nHere is where we will save the outputs of the API without any processing.\n\n::: {.cell}\n\n```{.r .cell-code}\nfp<- \"PhD_pages/data/original/OECD/\"\n```\n:::\n\n\n\nSet a year range for the queries below.\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_API<- FALSE\n\nstart_year<- 1950\nend_year<- 2020\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Industry-level data on value added and its components\"}\nif (query_API){\nselect_table<- \"SNA_TABLE6A_ARCHIVE\" # Value added and its components by activity, ISIC rev4\n\n\ncountries<- \"\" # leave blank for all entities\ntransactions<- \"\" # i.e. output/GOS/CoE etc. leave blank for all\nactivities<- \"\" # ISIC rev 4 industries. leave blank for all industries and sub-industries\nmeasures<- \"C+VOB\" # Prices. C = constant; VOB = indexed to OECD base year\n\nkey_query<- paste(countries,transactions,activities,measures, sep = \".\")\n\nindustry_accounts <- readSDMX(providerId = \"OECD\",\n                              resource = \"data\",\n                              flowRef = select_table,\n                              key = key_query,\n                              start = start_year,\n                              end = end_year,\n                              dsd = TRUE)\n\nindustry_accounts<- as.data.frame(industry_accounts)\n\n# Save\nsave(industry_accounts, file= paste0(fp, \"industry_accounts\", \".Rda\"))\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Industry-level data on employment\"}\nif (query_API){\n\n# INDUSTRY LABOUR INPUTS DATA ----\n\n# set paramaters for API query\n\nselect_table<- \"SNA_TABLE7A_ARCHIVE\" # Labour intput by activity, ISIC rev4\n\ncountries<- \"\" # leave blank for all entities\ntransactions<- \"\" # i.e. total employment/employed/self-employed. leave blank for all\nactivities<- \"\" # ISIC rev 4 industries. leave blank for all industries and sub-industries\nmeasures<- \"HRS\" # i.e. hours/jobs/fte. HRS = hours in millions\n\nkey_query<- paste(countries,transactions,activities,measures, sep = \".\")\n\nemployment_by_industry <- readSDMX(providerId = \"OECD\",\n                              resource = \"data\",\n                              flowRef = select_table,\n                              key = key_query,\n                              start = start_year,\n                              end = end_year,\n                              dsd = TRUE)\n\nemployment_by_industry<- as.data.frame(employment_by_industry)\n\n\n# Save\nsave(employment_by_industry, file=paste0(fp, \"employment_by_industry\", \".Rda\"))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Sector-level accounts (Households, Corporations, Govt etc.)\"}\nif (query_API){\n\n# Grab full dataset\n\nsector_accounts <- readSDMX(providerId = \"OECD\",\n                        resource = \"data\",\n                        flowRef = \"SNA_TABLE14A\",\n                        key = \"..S1+S2+S11+S12+S13+S14_S15+S14+S15.C\",\n                        start = start_year,\n                        end = end_year,\n                        dsd = TRUE)\n\nsector_accounts<- as.data.frame(sector_accounts)\n\n# Save\nsave(sector_accounts,\n     file= paste0(fp, \"sector_accounts\", \".Rda\"))\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#| code-fold: true\n#| code-summary: \"GDP measured in international-$\"\n\nif (query_API){\n# GDP AT PPPs ----\n\nGDP_PPP<- readSDMX(providerId = \"OECD\",\n                       resource = \"data\",\n                      flowRef = \"SNA_TABLE1\",\n                      key = \".B1_GE.VPVOB\",\n                       start = start_year,\n                      end = end_year,\n                      dsd = TRUE)\n\n\nGDP_PPP<- as.data.frame(GDP_PPP)\n\n# Save\nsave(GDP_PPP, file= paste0(fp, \"GDP_PPP\", \".Rda\"))\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Consumption of rent\"}\nif (query_API){\n# HOUSING CONSUMPTION ------\nrental_consumption <- readSDMX(providerId = \"OECD\",\n                            resource = \"data\",\n                            flowRef = \"SNA_TABLE5\",\n                            key = \".P31CP041+P31CP042.C+VOB\",\n                            start = start_year,\n                            end = end_year,\n                            dsd = TRUE)\n\nrental_consumption<- as.data.frame(rental_consumption)\n\n# Save\nsave(rental_consumption, file= paste0(fp, \"rental_consumption\", \".Rda\"))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Rental price level\"}\nif (query_API){\n# RENT PRICE -----\n# This is the CPI component for actual rentals or else the aggrgeate\n  # of actual and imputed rentals and maintenance. See paper for details.\n\nrent_price_index <- readSDMX(providerId = \"OECD\",\n                               resource = \"data\",\n                               flowRef = \"HOUSE_PRICES\",\n                               key = \".RPI\",\n                               start = start_year,\n                               end = end_year,\n                               dsd = TRUE)\n\nrent_price_index<- as.data.frame(rent_price_index)\n\n\n# Save\nsave(rent_price_index, file= paste0(fp, \"rent_price_index\", \".Rda\"))\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"CPI\"}\nif (query_API){\n# CPI ------\n\nCPI <- readSDMX(providerId = \"OECD\",\n                             resource = \"data\",\n                             flowRef = \"PRICES_CPI\",\n                             key = \".CPALTT01.IXOB.A\",\n                             start = start_year,\n                             end = end_year,\n                             dsd = TRUE)\n\nCPI<- as.data.frame(CPI)\n\n  # the single subject-measure CPALTT01 - IXOB refers to all items\n    # CPI index. 2015=100\n\n# Save\nsave(CPI, file= paste0(fp, \"CPI\", \".Rda\"))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"GDP deflator\"}\nif (query_API){\n\n# GDP deflator ------\n\nGDP_deflator <- readSDMX(providerId = \"OECD\",\n                resource = \"data\",\n                flowRef = \"EO\",\n                key = \".PGDP.A\",\n                start = start_year,\n                end = end_year,\n                dsd = TRUE)\n\nGDP_deflator<- as.data.frame(GDP_deflator)\n\n# the single subject-measure CPALTT01 - IXOB refers to all items\n# CPI index. 2015=100\n\n# Save\nsave(GDP_deflator, file= paste0(fp, \"GDP_deflator\", \".Rda\"))\n\n}\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}