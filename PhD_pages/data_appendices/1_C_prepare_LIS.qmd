---
title: "Appendix 1.C: Preparing LIS inequality data"
format: html
warning: false

---

::: {.callout-note collapse="true" appearance="minimal"}
### Packages and settings

```{python}
import pandas as pd
pd.set_option('display.max_rows', None)
```

:::

::: {.callout-note collapse="true" appearance="minimal"}
### Load LIS data

We load a local file downloaded from Our World in Data

```{python}
df_lis = pd.read_csv("data/original/Luxembourg Income Study (LIS, 2022).csv")
```

The dataframe looks like this:
```{python}
df_lis.head(50)
```
:::



::: {.callout-note collapse="true" appearance="minimal"}
### Select and rename needed variables, calculating some additional inequality metrics


```{python}

inc_concepts = {

    "short_name": [
        "equiv_disposable",
        "equiv_market",
        "percap_disposable",
        "percap_market"],
    "long_name": [
        "Disposable household income, equivalized",
        "Market income, equivalized",
        "Disposable household income, per capita",
        "Disposable household income, per capita"
    ]
}

keep_vars = []

for i in range(len(inc_concepts['short_name'])):

    short_suffix = inc_concepts['short_name'][i]
    long_suffix = inc_concepts['long_name'][i]

    # Gini
    gini_new_var = f'Gini_{short_suffix}'
    gini_old_var = f'Gini coefficient ({long_suffix})'

    df_lis[gini_new_var] = df_lis[gini_old_var] * 100

    keep_vars.append(gini_new_var)

    # Top 10% share
    top10_new_var = f'Top_10_share_{short_suffix}'
    top10_old_var = f'Richest decile - Share ({long_suffix})'

    df_lis[top10_new_var] = df_lis[top10_old_var]

    keep_vars.append(top10_new_var)

    # Bottom 50% share
    sum_cols = [
    'Poorest decile - Share',
    '2nd decile - Share',
    '3rd decile - Share',
    '4th decile - Share',
    '5th decile - Share',
    ]

    sum_cols = [sub + f' ({long_suffix})' for sub in sum_cols]

    bottom50_new_var = f'Bottom_50_share_{short_suffix}'

    df_lis[bottom50_new_var] = df_lis[sum_cols].sum(axis=1)

    keep_vars.append(bottom50_new_var)



other_vars_to_keep = ["Year", "Entity"]

keep_vars = other_vars_to_keep + keep_vars

df_lis = df_lis[keep_vars]

```

:::


::: {.callout-note collapse="true" appearance="minimal"}
### See the prepared data

The first 100 rows of the dataframe looks like this:
```{python}
df_lis.head(100)
```

:::

::: {.callout-note collapse="true" appearance="minimal"}
### Save the data
I save the prepared data locally:
```{python}
df_lis.to_csv("data/clean/lis.csv", index=False)
```
:::
