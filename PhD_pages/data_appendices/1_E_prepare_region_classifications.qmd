---
title: "Appendix 1.E: Preparing country region classifications"
format: html
warning: false


---



::: {.callout-note collapse="true" appearance="minimal"}
### Packages and settings
```{python}
import pandas as pd
pd.set_option('display.max_rows', None)
```
:::

::: {.callout-note collapse="true" appearance="minimal"}
### Load WID region classifications

For regional classifications I take WID definitions, as specified on their website [here](https://wid.world/codes-dictionary/#country-code).

I read in a csv prepared from the table in that webpage, which has been mapped to the Our World in Data standarized country names used throughout this project.

```{python}

df_regions = pd.read_csv("data/original/WID_regions_country_standardized.csv")

```

:::

::: {.callout-note collapse="true" appearance="minimal"}
### Define two region classifications

I create a clean region mapping table using two regional definitions.

One is the 'standard' definitions used by WID. 

In an alternative set I split Western and Eastern Europe, ccombining the latter with Russia & Central Asia to make a joint Eastern Europe and Central Asia region. 

```{python}

df_regions = df_regions[['Our World In Data Name', 'region (standard)', 'sub-region']].rename(columns={'Our World In Data Name': 'Entity', 'region (standard)': 'WID_region'})

# Define an alt region classification
df_regions['region_alt'] = df_regions['WID_region']

df_regions.loc[df_regions['sub-region'] == 'Western Europe','region_alt'] = 'Western Europe'

df_regions.loc[(df_regions['sub-region'] == 'Eastern Europe') | (df_regions['WID_region'] == 'Russia & Central Asia'),'region_alt'] = 'Eastern Europe & Central Asia'


df_regions = df_regions[["Entity", "WID_region", "region_alt"]]

```
:::

::: {.callout-note collapse="true" appearance="minimal"}
### See the prepared data

```{python}
df_regions
```

:::

::: {.callout-note collapse="true" appearance="minimal"}
### Save
```{python}
df_regions.to_csv('data/clean/region_mapping.csv')

```

:::
